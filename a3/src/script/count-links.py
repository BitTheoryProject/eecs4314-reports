import re
import operator
import argparse

# todo: add intersection, difference
parser = argparse.ArgumentParser(description='Count dependency links, and other statistics going in and out from subsystem')
parser.add_argument('-ta', '--ta-file', type=str, required=True, help='The ls.ta file generated by script/final-containment.sh and preprocessed by script/clean-ignored.py')
parser.add_argument('-ta-2', '--ta-file-2', type=str, required=False, help='A second ls.ta file to compare to the first')
parser.add_argument('-f', '--from-ss', type=str, required=False, help='The from subsystem (i.e sys)')
parser.add_argument('-t', '--to-ss', type=str, required=False, help='The to subsystem (i.e sys)')
parser.add_argument('-o', '--output', type=str, required=False, help='The file path to output the results [default is stdout]')
parser.add_argument('-l', '--links', action="store_true", required=False, help='Flag to display the links between files for ta-file')
args = parser.parse_args()

ta_file = args.ta_file
ta_file_2 = args.ta_file_2
from_ss = args.from_ss
to_ss = args.to_ss
output_file = args.output
display_links = args.links

links = {}
ta_file_set = set()
ta_file_set_2 = set()
links_ta_file, links_ta_file_2 = 0, 0
instances_count, instances_count_2 = 0, 0

with open(ta_file) as f, open(ta_file_2) as f2:
    for line in f:
        line = line.strip()
        if not line:
            continue
        parts = line.split(' ')

        if len(parts) != 3:
            continue
    
        type, from_file, to_file = parts

        if type == 'cLinks':
            links_ta_file += 1
            match_from = None if not from_ss else from_ss in from_file
            match_to = None if not to_ss else to_ss in to_file
            if from_file != to_file:
                if from_ss and not match_from:
                    continue;
                if to_ss and not match_to:
                    continue
                key = f'{from_file} -> {to_file}'
                ta_file_set.add(key)
                links[key] = links.get(key, 0) + 1
        elif type == '$INSTANCE':
            instances_count += 1

    for line in f2:
        line = line.strip()
        if not line:
            continue
        parts = line.split(' ')

        if len(parts) != 3:
            continue
    
        type, from_file, to_file = parts

        if type == 'cLinks':
            links_ta_file_2 += 1
            key = f'{from_file} -> {to_file}'
            ta_file_set_2.add(key)
        elif type == '$INSTANCE':
            instances_count_2 += 1


links = dict( sorted(links.items(), key=operator.itemgetter(1),reverse=True))
num_common = len(ta_file_set.intersection(ta_file_set_2))
res = []
res.append(f'Ta file "{ta_file}":\n')
res.append(f' # links: {links_ta_file}\n')
res.append(f' # instances: {instances_count}\n')

if ta_file_2:
    res.append(f'Ta file "{ta_file_2}":\n')
    res.append(f' # links: {links_ta_file_2}\n')
    res.append(f' # instances: {instances_count_2}\n\n')
    res.append(f'Ta file "{ta_file}" and "{ta_file_2}":\n')
    res.append(f' # common links: {num_common}\n\n')

if display_links:
    res.append(f'Links for "{ta_file}": from -> to (# links):\n\n')
for key, count in links.items():
    if display_links:
        res.append(f' {key} ({count})\n')

if output_file:
    with open(output_file, 'w') as of:
        for line in res:
            of.write(line)
else:
    for line in res:
        print(line)


    