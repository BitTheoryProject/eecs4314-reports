import re
import operator
import argparse

# todo: add intersection, difference
parser = argparse.ArgumentParser(description='Count dependency links, and other statistics going in and out from subsystem')
parser.add_argument('-ta', '--ta-file', type=str, required=True, help='The ls.ta file generated by script/final-containment.sh and preprocessed by script/clean-ignored.py')
parser.add_argument('-ta-2', '--ta-file-2', type=str, required=False, help='A second ls.ta file to compare to the first')
parser.add_argument('-f', '--from-ss', type=str, required=False, help='The from subsystem (i.e sys)')
parser.add_argument('-t', '--to-ss', type=str, required=False, help='The to subsystem (i.e sys)')
parser.add_argument('-o', '--output', type=str, required=False, help='The file path to output the results [default is stdout]')
args = parser.parse_args()

ta_file = args.ta_file
ta_file_2 = args.ta_file_2
from_ss = args.from_ss
to_ss = args.to_ss
output_file = args.output

links = {}
links_ta_file, links_ta_file_2 = 0, 0
instances_count, instances_count_2 = 0, 0

with open(ta_file) as f, open(ta_file_2) as f2:
    for line in f:
        line = line.strip()
        if not line:
            continue
        parts = line.split(' ')

        if len(parts) != 3:
            continue
    
        type, from_file, to_file = parts

        if type == 'cLinks':
            links_ta_file += 1
            match_from = re.search(r"^freebsd/([^\/]+).*$", from_file)
            match_to = re.search(r"^freebsd/([^\/]+).*$", to_file)
            if match_from and match_to:
                subsystem_from = match_from.group(1)
                subsystem_to = match_to.group(1)

                if from_ss and subsystem_from != from_ss:
                    continue;
                if to_ss and subsystem_to != to_ss:
                    continue
                if subsystem_from == subsystem_to:
                    continue
                
                key = f'{subsystem_from}->{subsystem_to}'
                links[key] = links.get(key, 0) + 1
        elif type == '$INSTANCE':
            instances_count += 1

    for line in f2:
        line = line.strip()
        if not line:
            continue
        parts = line.split(' ')

        if len(parts) != 3:
            continue
    
        type, from_file, to_file = parts

        if type == 'cLinks':
            links_ta_file_2 += 1
        elif type == '$INSTANCE':
            instances_count_2 += 1



links = dict( sorted(links.items(), key=operator.itemgetter(1),reverse=True))
res = []

for key, count in links.items():
    res.append(f'{key} ({count})')

if output_file:
    with open(output_file, 'w') as of:
        for line in res:
            of.write(line)
else:
    print('Subsystem links ranked by most connections:\n')
    for line in res:
        print(line)

    print(f'Ta file "{ta_file}" # links: {links_ta_file}')
    print(f'Ta file "{ta_file}" # instances: {instances_count}')
    if ta_file_2:
        print(f'Ta file "{ta_file_2}" # links: {links_ta_file_2}')
        print(f'Ta file "{ta_file_2}" # instances: {instances_count_2}')
